// Code generated by go-swagger; DO NOT EDIT.

package recommend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRecommendClusterSetupParams creates a new RecommendClusterSetupParams object
// with the default values initialized.
func NewRecommendClusterSetupParams() *RecommendClusterSetupParams {
	var ()
	return &RecommendClusterSetupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRecommendClusterSetupParamsWithTimeout creates a new RecommendClusterSetupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRecommendClusterSetupParamsWithTimeout(timeout time.Duration) *RecommendClusterSetupParams {
	var ()
	return &RecommendClusterSetupParams{

		timeout: timeout,
	}
}

// NewRecommendClusterSetupParamsWithContext creates a new RecommendClusterSetupParams object
// with the default values initialized, and the ability to set a context for a request
func NewRecommendClusterSetupParamsWithContext(ctx context.Context) *RecommendClusterSetupParams {
	var ()
	return &RecommendClusterSetupParams{

		Context: ctx,
	}
}

// NewRecommendClusterSetupParamsWithHTTPClient creates a new RecommendClusterSetupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRecommendClusterSetupParamsWithHTTPClient(client *http.Client) *RecommendClusterSetupParams {
	var ()
	return &RecommendClusterSetupParams{
		HTTPClient: client,
	}
}

/*RecommendClusterSetupParams contains all the parameters to send to the API endpoint
for the recommend cluster setup operation typically these are written to a http.Request
*/
type RecommendClusterSetupParams struct {

	/*AllowBurst
	  Are burst instances allowed in recommendation

	*/
	AllowBurst *bool
	/*AllowDiversify
	  AllowDiversify allow diversification of virtual machines

	*/
	AllowDiversify *bool
	/*AllowOlderGen
	  AllowOlderGen allow older generations of virtual machines (applies for EC2 only)

	*/
	AllowOlderGen *bool
	/*Category
	  Category specifies the virtual machine category

	*/
	Category []string
	/*Excludes
	  Excludes is a blacklist - a slice with vm types to be excluded from the recommendation

	*/
	Excludes []string
	/*Includes
	  Includes is a whitelist - a slice with vm types to be contained in the recommendation

	*/
	Includes []string
	/*MaxNodes
	  Maximum number of nodes in the recommended cluster

	*/
	MaxNodes *int64
	/*MinNodes
	  Minimum number of nodes in the recommended cluster

	*/
	MinNodes *int64
	/*NetworkPerf
	  NetworkPerf specifies the network performance category

	*/
	NetworkPerf *string
	/*OnDemandPct
	  Percentage of regular (on-demand) nodes in the recommended cluster

	*/
	OnDemandPct *int64
	/*Provider*/
	Provider string
	/*Region*/
	Region string
	/*RespPerService
	  Maximum number of response per service

	*/
	RespPerService *int64
	/*SameSize
	  If true, recommended instance types will have a similar size

	*/
	SameSize *bool
	/*Service*/
	Service string
	/*SumCPU
	  Total number of CPUs requested for the cluster

	*/
	SumCPU *float64
	/*SumGpu
	  Total number of GPUs requested for the cluster

	*/
	SumGpu *int64
	/*SumMem
	  Total memory requested for the cluster (GB)

	*/
	SumMem *float64
	/*Zones
	  Availability zones that the cluster should expand to

	*/
	Zones []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithTimeout(timeout time.Duration) *RecommendClusterSetupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithContext(ctx context.Context) *RecommendClusterSetupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithHTTPClient(client *http.Client) *RecommendClusterSetupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowBurst adds the allowBurst to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithAllowBurst(allowBurst *bool) *RecommendClusterSetupParams {
	o.SetAllowBurst(allowBurst)
	return o
}

// SetAllowBurst adds the allowBurst to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetAllowBurst(allowBurst *bool) {
	o.AllowBurst = allowBurst
}

// WithAllowDiversify adds the allowDiversify to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithAllowDiversify(allowDiversify *bool) *RecommendClusterSetupParams {
	o.SetAllowDiversify(allowDiversify)
	return o
}

// SetAllowDiversify adds the allowDiversify to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetAllowDiversify(allowDiversify *bool) {
	o.AllowDiversify = allowDiversify
}

// WithAllowOlderGen adds the allowOlderGen to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithAllowOlderGen(allowOlderGen *bool) *RecommendClusterSetupParams {
	o.SetAllowOlderGen(allowOlderGen)
	return o
}

// SetAllowOlderGen adds the allowOlderGen to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetAllowOlderGen(allowOlderGen *bool) {
	o.AllowOlderGen = allowOlderGen
}

// WithCategory adds the category to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithCategory(category []string) *RecommendClusterSetupParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetCategory(category []string) {
	o.Category = category
}

// WithExcludes adds the excludes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithExcludes(excludes []string) *RecommendClusterSetupParams {
	o.SetExcludes(excludes)
	return o
}

// SetExcludes adds the excludes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetExcludes(excludes []string) {
	o.Excludes = excludes
}

// WithIncludes adds the includes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithIncludes(includes []string) *RecommendClusterSetupParams {
	o.SetIncludes(includes)
	return o
}

// SetIncludes adds the includes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetIncludes(includes []string) {
	o.Includes = includes
}

// WithMaxNodes adds the maxNodes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithMaxNodes(maxNodes *int64) *RecommendClusterSetupParams {
	o.SetMaxNodes(maxNodes)
	return o
}

// SetMaxNodes adds the maxNodes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetMaxNodes(maxNodes *int64) {
	o.MaxNodes = maxNodes
}

// WithMinNodes adds the minNodes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithMinNodes(minNodes *int64) *RecommendClusterSetupParams {
	o.SetMinNodes(minNodes)
	return o
}

// SetMinNodes adds the minNodes to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetMinNodes(minNodes *int64) {
	o.MinNodes = minNodes
}

// WithNetworkPerf adds the networkPerf to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithNetworkPerf(networkPerf *string) *RecommendClusterSetupParams {
	o.SetNetworkPerf(networkPerf)
	return o
}

// SetNetworkPerf adds the networkPerf to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetNetworkPerf(networkPerf *string) {
	o.NetworkPerf = networkPerf
}

// WithOnDemandPct adds the onDemandPct to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithOnDemandPct(onDemandPct *int64) *RecommendClusterSetupParams {
	o.SetOnDemandPct(onDemandPct)
	return o
}

// SetOnDemandPct adds the onDemandPct to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetOnDemandPct(onDemandPct *int64) {
	o.OnDemandPct = onDemandPct
}

// WithProvider adds the provider to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithProvider(provider string) *RecommendClusterSetupParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetProvider(provider string) {
	o.Provider = provider
}

// WithRegion adds the region to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithRegion(region string) *RecommendClusterSetupParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetRegion(region string) {
	o.Region = region
}

// WithRespPerService adds the respPerService to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithRespPerService(respPerService *int64) *RecommendClusterSetupParams {
	o.SetRespPerService(respPerService)
	return o
}

// SetRespPerService adds the respPerService to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetRespPerService(respPerService *int64) {
	o.RespPerService = respPerService
}

// WithSameSize adds the sameSize to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithSameSize(sameSize *bool) *RecommendClusterSetupParams {
	o.SetSameSize(sameSize)
	return o
}

// SetSameSize adds the sameSize to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetSameSize(sameSize *bool) {
	o.SameSize = sameSize
}

// WithService adds the service to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithService(service string) *RecommendClusterSetupParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetService(service string) {
	o.Service = service
}

// WithSumCPU adds the sumCPU to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithSumCPU(sumCPU *float64) *RecommendClusterSetupParams {
	o.SetSumCPU(sumCPU)
	return o
}

// SetSumCPU adds the sumCpu to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetSumCPU(sumCPU *float64) {
	o.SumCPU = sumCPU
}

// WithSumGpu adds the sumGpu to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithSumGpu(sumGpu *int64) *RecommendClusterSetupParams {
	o.SetSumGpu(sumGpu)
	return o
}

// SetSumGpu adds the sumGpu to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetSumGpu(sumGpu *int64) {
	o.SumGpu = sumGpu
}

// WithSumMem adds the sumMem to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithSumMem(sumMem *float64) *RecommendClusterSetupParams {
	o.SetSumMem(sumMem)
	return o
}

// SetSumMem adds the sumMem to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetSumMem(sumMem *float64) {
	o.SumMem = sumMem
}

// WithZones adds the zones to the recommend cluster setup params
func (o *RecommendClusterSetupParams) WithZones(zones []string) *RecommendClusterSetupParams {
	o.SetZones(zones)
	return o
}

// SetZones adds the zones to the recommend cluster setup params
func (o *RecommendClusterSetupParams) SetZones(zones []string) {
	o.Zones = zones
}

// WriteToRequest writes these params to a swagger request
func (o *RecommendClusterSetupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowBurst != nil {

		// query param allowBurst
		var qrAllowBurst bool
		if o.AllowBurst != nil {
			qrAllowBurst = *o.AllowBurst
		}
		qAllowBurst := swag.FormatBool(qrAllowBurst)
		if qAllowBurst != "" {
			if err := r.SetQueryParam("allowBurst", qAllowBurst); err != nil {
				return err
			}
		}

	}

	if o.AllowDiversify != nil {

		// query param allowDiversify
		var qrAllowDiversify bool
		if o.AllowDiversify != nil {
			qrAllowDiversify = *o.AllowDiversify
		}
		qAllowDiversify := swag.FormatBool(qrAllowDiversify)
		if qAllowDiversify != "" {
			if err := r.SetQueryParam("allowDiversify", qAllowDiversify); err != nil {
				return err
			}
		}

	}

	if o.AllowOlderGen != nil {

		// query param allowOlderGen
		var qrAllowOlderGen bool
		if o.AllowOlderGen != nil {
			qrAllowOlderGen = *o.AllowOlderGen
		}
		qAllowOlderGen := swag.FormatBool(qrAllowOlderGen)
		if qAllowOlderGen != "" {
			if err := r.SetQueryParam("allowOlderGen", qAllowOlderGen); err != nil {
				return err
			}
		}

	}

	valuesCategory := o.Category

	joinedCategory := swag.JoinByFormat(valuesCategory, "")
	// query array param category
	if err := r.SetQueryParam("category", joinedCategory...); err != nil {
		return err
	}

	valuesExcludes := o.Excludes

	joinedExcludes := swag.JoinByFormat(valuesExcludes, "")
	// query array param excludes
	if err := r.SetQueryParam("excludes", joinedExcludes...); err != nil {
		return err
	}

	valuesIncludes := o.Includes

	joinedIncludes := swag.JoinByFormat(valuesIncludes, "")
	// query array param includes
	if err := r.SetQueryParam("includes", joinedIncludes...); err != nil {
		return err
	}

	if o.MaxNodes != nil {

		// query param maxNodes
		var qrMaxNodes int64
		if o.MaxNodes != nil {
			qrMaxNodes = *o.MaxNodes
		}
		qMaxNodes := swag.FormatInt64(qrMaxNodes)
		if qMaxNodes != "" {
			if err := r.SetQueryParam("maxNodes", qMaxNodes); err != nil {
				return err
			}
		}

	}

	if o.MinNodes != nil {

		// query param minNodes
		var qrMinNodes int64
		if o.MinNodes != nil {
			qrMinNodes = *o.MinNodes
		}
		qMinNodes := swag.FormatInt64(qrMinNodes)
		if qMinNodes != "" {
			if err := r.SetQueryParam("minNodes", qMinNodes); err != nil {
				return err
			}
		}

	}

	if o.NetworkPerf != nil {

		// query param networkPerf
		var qrNetworkPerf string
		if o.NetworkPerf != nil {
			qrNetworkPerf = *o.NetworkPerf
		}
		qNetworkPerf := qrNetworkPerf
		if qNetworkPerf != "" {
			if err := r.SetQueryParam("networkPerf", qNetworkPerf); err != nil {
				return err
			}
		}

	}

	if o.OnDemandPct != nil {

		// query param onDemandPct
		var qrOnDemandPct int64
		if o.OnDemandPct != nil {
			qrOnDemandPct = *o.OnDemandPct
		}
		qOnDemandPct := swag.FormatInt64(qrOnDemandPct)
		if qOnDemandPct != "" {
			if err := r.SetQueryParam("onDemandPct", qOnDemandPct); err != nil {
				return err
			}
		}

	}

	// path param provider
	if err := r.SetPathParam("provider", o.Provider); err != nil {
		return err
	}

	// path param region
	if err := r.SetPathParam("region", o.Region); err != nil {
		return err
	}

	if o.RespPerService != nil {

		// query param respPerService
		var qrRespPerService int64
		if o.RespPerService != nil {
			qrRespPerService = *o.RespPerService
		}
		qRespPerService := swag.FormatInt64(qrRespPerService)
		if qRespPerService != "" {
			if err := r.SetQueryParam("respPerService", qRespPerService); err != nil {
				return err
			}
		}

	}

	if o.SameSize != nil {

		// query param sameSize
		var qrSameSize bool
		if o.SameSize != nil {
			qrSameSize = *o.SameSize
		}
		qSameSize := swag.FormatBool(qrSameSize)
		if qSameSize != "" {
			if err := r.SetQueryParam("sameSize", qSameSize); err != nil {
				return err
			}
		}

	}

	// path param service
	if err := r.SetPathParam("service", o.Service); err != nil {
		return err
	}

	if o.SumCPU != nil {

		// query param sumCpu
		var qrSumCPU float64
		if o.SumCPU != nil {
			qrSumCPU = *o.SumCPU
		}
		qSumCPU := swag.FormatFloat64(qrSumCPU)
		if qSumCPU != "" {
			if err := r.SetQueryParam("sumCpu", qSumCPU); err != nil {
				return err
			}
		}

	}

	if o.SumGpu != nil {

		// query param sumGpu
		var qrSumGpu int64
		if o.SumGpu != nil {
			qrSumGpu = *o.SumGpu
		}
		qSumGpu := swag.FormatInt64(qrSumGpu)
		if qSumGpu != "" {
			if err := r.SetQueryParam("sumGpu", qSumGpu); err != nil {
				return err
			}
		}

	}

	if o.SumMem != nil {

		// query param sumMem
		var qrSumMem float64
		if o.SumMem != nil {
			qrSumMem = *o.SumMem
		}
		qSumMem := swag.FormatFloat64(qrSumMem)
		if qSumMem != "" {
			if err := r.SetQueryParam("sumMem", qSumMem); err != nil {
				return err
			}
		}

	}

	valuesZones := o.Zones

	joinedZones := swag.JoinByFormat(valuesZones, "")
	// query array param zones
	if err := r.SetQueryParam("zones", joinedZones...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
